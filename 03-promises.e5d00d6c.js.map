{"mappings":"AAAA,SAASA,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,KACLH,EACFF,EAAQ,C,SAAEH,E,MAAUC,IAEpBG,EAAO,C,SAAEJ,E,MAAUC,GAAQ,GAE5BA,EAAM,G,CAKX,MAAMQ,EAAOC,SAASC,cAAc,SAClBD,SAASC,cAAc,cAEzCF,EAAKG,iBAAiB,UAAWC,IAE/B,MAAMC,KAACA,EAAMb,MAAAc,EAAKC,OAAEA,GAASH,EAAMI,OAAOC,SAEpCC,EAAaC,SAASL,EAAMM,OAC5BC,EAAYF,SAASN,EAAKO,OAC1BE,EAAcH,SAASJ,EAAOK,OAEpC,IAAK,IAAIG,EAAI,EAAGA,EAAID,EAAaC,IAC/BzB,EAAcyB,EAAGL,EAAaK,EAAIF,GAC/BG,MAAK,EAACzB,SAAEA,EAAQC,MAAEA,MACjByB,SAASC,OAAOC,QAAQ,uBAAqB5B,QAAiBC,MAAU,IAEzE4B,OAAM,EAAC7B,SAAEA,EAAQC,MAAEA,MAClByB,SAASC,OAAOG,QAAQ,sBAAoB9B,QAAeC,MAAU,IAK5EY,EAAMI,OAAOc,OAAQ","sources":["src/js/03-promises.js"],"sourcesContent":["function createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\n\n  const form = document.querySelector('.form');\n  const createBtn = document.querySelector('#createBtn');\n\n  form.addEventListener('submit', (event) => {\n   \n    const {step, delay, amount}= event.target.elements;\n\n    const delayInput = parseInt(delay.value);\n    const stepInput = parseInt(step.value);\n    const amountInput = parseInt(amount.value);\n\n    for (let i = 0; i < amountInput; i++) {\n      createPromise(i, delayInput + i * stepInput)\n        .then(({ position, delay }) => {\n          Notiflix.Notify.Success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n        })\n        .catch(({ position, delay }) => {\n          Notiflix.Notify.Failure(`❌ Rejected promise ${position} in ${delay}ms`);\n        });\n    }\n\n   \n   event.target.reset ()\n  });\n\n"],"names":["$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","$47d4ff9957288465$var$form","document","querySelector","addEventListener","event","step","delay1","amount","target","elements","delayInput","parseInt","value","stepInput","amountInput","i","then","Notiflix","Notify","Success","catch","Failure","reset"],"version":3,"file":"03-promises.e5d00d6c.js.map"}