{"mappings":"AAAAA,SAASC,iBAAiB,oBAAoB,WAiB5C,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GAEtCC,YAAW,WACLH,EACFF,EAAQ,CAAEH,WAAUC,UAEpBG,EAAO,CAAEJ,WAAUC,S,GAEpBA,E,IA1BMJ,SAASY,cAAc,SAE/BX,iBAAiB,UAAU,SAACY,GAC/BA,EAAMC,iBAEN,IAAMC,EAAaf,SAASY,cAAc,uBACpCI,EAAYhB,SAASY,cAAc,sBACnCK,EAAcjB,SAASY,cAAc,wBAErCR,EAAQc,SAASH,EAAWI,OAC5BC,EAAOF,SAASF,EAAUG,QAoBlC,SAA0BE,EAAQjB,EAAOgB,GACvC,IAAK,IAAIE,EAAI,EAAGA,GAAKD,EAAQC,IAC3BpB,EAAcoB,EAAGlB,GACdmB,MAAK,SAAAC,G,IAAGrB,EAAQqB,EAARrB,SAAUsB,EAAKD,EAALpB,MACjBsB,SAASC,OAAOC,QAAQ,uBAAwCC,OAAf1B,EAAS,QAAY0B,OAANJ,EAAM,M,IAEvEK,OAAM,SAAAN,G,IAAGrB,EAAQqB,EAARrB,SAAUsB,EAAKD,EAALpB,MAClBsB,SAASC,OAAOI,QAAQ,sBAAqCF,OAAf1B,EAAS,QAAY0B,OAANJ,EAAM,M,IAGvErB,GAASgB,C,CA3BXY,CAFed,SAASD,EAAYE,OAEXf,EAAOgB,E","sources":["src/js/03-promises.js"],"sourcesContent":["document.addEventListener(\"DOMContentLoaded\", () => {\n  const form = document.querySelector(\".form\");\n\n  form.addEventListener(\"submit\", (event) => {\n    event.preventDefault();\n\n    const delayInput = document.querySelector('input[name=\"delay\"]');\n    const stepInput = document.querySelector('input[name=\"step\"]');\n    const amountInput = document.querySelector('input[name=\"amount\"]');\n\n    const delay = parseInt(delayInput.value);\n    const step = parseInt(stepInput.value);\n    const amount = parseInt(amountInput.value);\n\n    generatePromises(amount, delay, step);\n  });\n\n  function createPromise(position, delay) {\n    return new Promise((resolve, reject) => {\n      const shouldResolve = Math.random() > 0.3;\n\n      setTimeout(() => {\n        if (shouldResolve) {\n          resolve({ position, delay });\n        } else {\n          reject({ position, delay });\n        }\n      }, delay);\n    });\n  }\n\n  function generatePromises(amount, delay, step) {\n    for (let i = 1; i <= amount; i++) {\n      createPromise(i, delay)\n        .then(({ position, delay }) => {\n          Notiflix.Notify.Success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n        })\n        .catch(({ position, delay }) => {\n          Notiflix.Notify.Failure(`❌ Rejected promise ${position} in ${delay}ms`);\n        });\n\n      delay += step;\n    }\n  }\n});\n"],"names":["document","addEventListener","createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","querySelector","event","preventDefault","delayInput","stepInput","amountInput","parseInt","value","step","amount","i","then","param","_$delay","Notiflix","Notify","Success","concat","catch","Failure","generatePromises"],"version":3,"file":"03-promises.0a054238.js.map"}